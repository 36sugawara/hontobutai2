<% content_for(:title, t('.title')) %>
<% breadcrumb :books %>
<div class="text-primary text-center text-xl">
  <p>地図または検索ボックスから投稿を絞りこんでください</p>
</div>
<div class="container mx-auto my-3">
  <div id="regions_div" class="mx-auto" style="max-width: 900px; width: 90%"></div>
  <div class="my-5">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
      document.addEventListener("turbo:load", function() { 
        try {
          google.charts.load('current', {
              'packages':[
                  'geochart'
              ],
              'mapsApiKey': '<%= ENV['GOOGLE_MAP_API'] %>'
          });
        } catch (error) {
          //リロードさせる記述
          window.location.reload();
        };
          
        // モデルをJSON.parseする
        const modeljson_parse = (item) => {
          item = JSON.stringify(item);  // JSをjsonに置換
          item = item.substr(1, (item.length - 2));  // 切り出し(開始位置, 文字数)
          item = unEscapeHtml(item);  // エスケープされたHTML文字を元に戻す関数
          item = JSON.parse(item);  // JSON形式で書かれた文字列をJavaScriptのJSONオブジェクトに変換する
          return item;
        }

        // アンエスケープ処理、エスケープされた文字を元の文字に戻す
        const unEscapeHtml = (str) => {
          str = str.replace(/(&gt;)/g, '>');
          str = str.replace(/(&lt;)/g, '<');
          str = str.replace(/(&#092;)/g, '\\');
          str = str.replace(/(&quot;)/g, '"');
          str = str.replace(/(&#39;)/g, "'");
          str = str.replace(/(&amp;)/g, '&');
          return str
        } 

        // 国がクリックされたら、国名コードをGETパラメータにして投稿一覧ページへ送る
        const selectHandler = (reg) => {
          let Country = modeljson_parse('<%=@country%>');
          let country = Country.find(country => country.country_code === reg.region)?.id;
          window.location.href = '/books?q%5Bcountry_id_eq%5D=' + country
        }

        // 投稿データの有無で色分けをする
        const drawRegionsMap = () => {
          const book_countries = "<%= @book_countries %>";
          const codes = modeljson_parse(book_countries).map(book_country => {
            return [book_country.country_code, book_country.name]
          })
          codes.unshift(["Country", "Name"])
          const data = google.visualization.arrayToDataTable(codes);
          const options = {
                defaultColor:'#82AAE3',  // 投稿データがある国の色
                datalessRegionColor:'#EFFFFD',  // 投稿データがない国の色
                backgroundColor:'#afeeee'
          };
          const chart = new google.visualization.GeoChart(document.getElementById('regions_div'));

          google.visualization.events.addListener(chart, 'regionClick', selectHandler); //chartに対してregionClickイベントが起こりselectHandlerメソッドが実行される
          chart.draw(data, options);
        }

        google.charts.setOnLoadCallback(drawRegionsMap);
      });
    </script>
  </div>
  <!-- 検索フォーム -->
  <%= render 'books/search_form', q: @q %>
  <!-- 投稿一覧 -->
  <% if @books.present? %>
    <div class="flex flex-wrap">
      <%= render @books %>
    </div>
  <% else %>
    <p class="mt-3 text-primary font-semibold"><%= t('.no_result') %></p>
  <% end %>
  <%= paginate @books %>
</div>